@background: white;
@border: #bcbcbc;
@control-color: #3A822E;
@thingy-border: #bcbcbd;
@thingy-background: #e4ede5;
@error-background: #fde9e9;
@error-border: #ffbdbd;
@button-text-color: #1e5d7d;
@button-background: #f3f4f5;
@placeholder-border: black;
@focused-background: #eee;

.text-smallish {
    width: 13em;
}
.layout-editor-element-template {
    display: none;
}
legend.layout-element-index {
    font-size: 1.2em;
    display: block;
    position: relative;
    left: -20px;
}
.layout-editor-element-actions {
    position: absolute;
    top: 6px;
    right: 6px;
    a {
        padding-right: 4px;
    }
}
.layout-editor-xml {
    width: 450px;
}
.layout-editor-layer-switches {
    position: relative;
    top: 0;
    padding: 0 10px;
    display: none;
}

.layout-preview-zoom-slider .ui-slider-handle, .layout-range-slider .ui-slider-handle {
    position: absolute;
    top: -6px;
    width: 8px;
    height: 15px;
    margin-left: -5px;
    cursor: ew-resize;
    background-color: @control-color;
    border: 1px solid @thingy-border;
}

.layout-editor-placeholder.error {
    background-color: @error-background;
    border: @error-border solid 1px;
}
.layout-editor-list>ol {
    height: 403px;
    overflow-y: scroll;
}
.layout-zoom-fit, .layout-zoom-100-percent {
    display: inline-block;
    text-indent: -9999em;
    width: 16px;
    height: 16px;
    margin: 2px;
    background: url(../Content/Fit.png) no-repeat;
}
.layout-preview-zoom {
    position: absolute;
    right: 14px;
    top: 446px;
    display: none;
}
.templated-item-preview-float {
    position: absolute;
    right: 48px;
    top: 250px;
    background-color: #fff;
    border: solid 1px #ccc;
    padding: 5px;
}
.layout-zoom-100-percent {
    background: url(../Content/100percent.png) no-repeat;
}
.layout-zoom-box {
    display: inline-block;
    position: relative;
}

.layout-editor-layer {
    padding: 3px 5px;
    position: absolute;
    width: 100%;
    height: 403px;
    top: 0;
    left: 0;
    background-color: @background;
    border: solid 1px @thingy-border;
}
.layout-editor {
    position: relative;
    top: 0;
    left: 0;
    width: 450px;
    height: 430px;
}
.layout {
    position: relative;
    top: 0;
    left: 0;
    width: 100%;
}

.layout-editor-toolbar {
    border: 1px solid @border;
    position: absolute;
    top: 0;
    left: 461px;
    background-color: @background;
    li {
        padding: 2px;
        width: 16px;
    }
}
.layout-editor-layer-switch.selected {
    border-top: solid 1px @background;
    background-color: @background;
    a {
        color: @control-color;
    }
}

.layout-editor-layer-switch {
    padding: 0 10px;
    background-color: @button-background;
    border: solid 1px @thingy-border;
    display: inline-block;
    a {
        color: @button-text-color;
    }
}

.layout-preview-zoom-slider .ui-slider-range, .layout-range-slider .ui-slider-range {
    height: 100%;
    background-color: @thingy-border;
    position: relative;
}
.layout-preview-zoom-slider, .layout-range-slider {
    height: 4px;
    width: 150px;
    border: 1px solid @thingy-border;
    position: relative;
    top: 0;
    left: 0;
}
fieldset.layout-element-editor {
    padding-left: 20px;
    position: relative;
    fieldset.layout-element-editor {
        padding-left: 0;
    }
}
.layout-editor-general {
    width: 446px;
    height: 399px;
    overflow: hidden;
    background-color: @background;
    display: none;
    border: none;
    position: relative;
    top: 0;
    left: 0;
}

.drag-placeholder {
    border: 1px solid @placeholder-border;
}
.layout-range-slider {
    margin: 10px 0 10px 56px;
    width: 179px;
    background: url(../Content/SliderScaleLight.png);
    .ui-slider-range {
        background: url(../Content/SliderScaleDark.png);
    }
}
.layout-zoom-buttons {
    display: inline-block;
}
#main {
    .layout-editor-frame {
        textarea {
            width: 444px;
            height: 397px;
            resize: none;
            border: none;
        }
    }
}

.layout-editor-placeholder {
    background-color: @thingy-background;
}
.layout-editor-frame {
    height: 404px;
    padding: 3px;
}

.layout-editor-list {
    overflow: hidden;
    ol {
        ol {
            height: auto;
            overflow-y: auto;
            margin-left: 12px;
            border-left: solid 1px @border;
        }
    }
    li {
        overflow: hidden;
    }
    li.focused {
        background-color: @focused-background;
        border: solid 1px @thingy-border;
    }
}
.templated-item-preview {
    display: none;
}
.layout-editor-element {
    border-bottom: solid 1px @thingy-border;
    position: relative;
    top: 0;
    left: 0;
    white-space: nowrap;
    padding: 4px;
    margin: 0;
    label {
        display: inline-block;
        min-width: 40px;
        text-align: right;
    }
    legend {
        cursor: move;
        width: 100%;
    }
}
.layout-preview-zoom-slider {
    top: -3px;
}
.layout-preview {
    width: 500px;
    height: 409px;
    position: absolute;
    right: 10px;
    border: 1px solid @thingy-border;
    overflow: hidden;
    cursor: move;
    .focused {
        background-color: @focused-background !important;
    }
    img {
        max-width: 100%;
        max-height: 100%;
    }
    * {
        box-sizing: border-box;
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
    }
}
.templated-item, .layout-preview-container {
    height: 100%;
    width: 100%;
    white-space: normal;
    display: block;
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    position: absolute;
    overflow: visible;

    .layout-element-row, .layout-element-column {
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        -webkit-box-sizing: border-box;
    }

    .layout-element-column {
        height: 100%;
    }

    .layout-element-img img {
        max-width: 90%;
        max-height: 90%;
    }
    /* slides made of only an image should be full size */
    > .layout-element-img > img {
        max-width: none;
        max-height: none;
        width: 100%;
        height: auto;
    }
    /* grid with bits of Twitter Bootstrap style sheet re-used under Apache license */

@screen-xs:                  480px;
@screen-xs-min:              @screen-xs;
@screen-phone:               @screen-xs-min;

// Small screen / tablet
// Note: Deprecated @screen-sm and @screen-tablet as of v3.0.1
@screen-sm:                  768px;
@screen-sm-min:              @screen-sm;
@screen-tablet:              @screen-sm-min;

// Medium screen / desktop
// Note: Deprecated @screen-md and @screen-desktop as of v3.0.1
@screen-md:                  992px;
@screen-md-min:              @screen-md;
@screen-desktop:             @screen-md-min;

// Large screen / wide desktop
// Note: Deprecated @screen-lg and @screen-lg-desktop as of v3.0.1
@screen-lg:                  1200px;
@screen-lg-min:              @screen-lg;
@screen-lg-desktop:          @screen-lg-min;

// So media queries don't overlap when required, provide a maximum
@screen-xs-max:              (@screen-sm-min - 1);
@screen-sm-max:              (@screen-md-min - 1);
@screen-md-max:              (@screen-lg-min - 1);

// Number of columns in the grid.
@grid-columns:              12;
// Padding between columns. Gets divided in half for the left and right.
@grid-gutter-width:         30px;
// Navbar collapse
// Point at which the navbar becomes uncollapsed.
@grid-float-breakpoint:     @screen-sm-min;
// Point at which the navbar begins collapsing.
@grid-float-breakpoint-max: (@grid-float-breakpoint - 1);


//== Container sizes
//
//## Define the maximum width of `.container` for different screen sizes.

// Small screen / tablet
@container-tablet:             ((720px + @grid-gutter-width));
// For `@screen-sm-min` and up.
@container-sm:                 @container-tablet;

// Medium screen / desktop
@container-desktop:            ((940px + @grid-gutter-width));
// For `@screen-md-min` and up.
@container-md:                 @container-desktop;

// Large screen / wide desktop
@container-large-desktop:      ((1140px + @grid-gutter-width));
// For `@screen-lg-min` and up.
@container-lg:                 @container-large-desktop;
// Centered container element
.container-fixed() {
  margin-right: auto;
  margin-left: auto;
  padding-left:  (@grid-gutter-width / 2);
  padding-right: (@grid-gutter-width / 2);
  &:extend(.clearfix all);
}

// Creates a wrapper for a series of columns
.make-row(@gutter: @grid-gutter-width) {
  margin-left:  (@gutter / -2);
  margin-right: (@gutter / -2);
  &:extend(.clearfix all);
}

// Generate the extra small columns
.make-xs-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  float: left;
  width: percentage((@columns / @grid-columns));
  min-height: 1px;
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);
}
.make-xs-column-offset(@columns) {
  @media (min-width: @screen-xs-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-xs-column-push(@columns) {
  @media (min-width: @screen-xs-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-xs-column-pull(@columns) {
  @media (min-width: @screen-xs-min) {
    right: percentage((@columns / @grid-columns));
  }
}


// Generate the small columns
.make-sm-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

  @media (min-width: @screen-sm-min) {
    float: left;
    width: percentage((@columns / @grid-columns));
  }
}
.make-sm-column-offset(@columns) {
  @media (min-width: @screen-sm-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-sm-column-push(@columns) {
  @media (min-width: @screen-sm-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-sm-column-pull(@columns) {
  @media (min-width: @screen-sm-min) {
    right: percentage((@columns / @grid-columns));
  }
}


// Generate the medium columns
.make-md-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

  @media (min-width: @screen-md-min) {
    float: left;
    width: percentage((@columns / @grid-columns));
  }
}
.make-md-column-offset(@columns) {
  @media (min-width: @screen-md-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-md-column-push(@columns) {
  @media (min-width: @screen-md-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-md-column-pull(@columns) {
  @media (min-width: @screen-md-min) {
    right: percentage((@columns / @grid-columns));
  }
}


// Generate the large columns
.make-lg-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

  @media (min-width: @screen-lg-min) {
    float: left;
    width: percentage((@columns / @grid-columns));
  }
}
.make-lg-column-offset(@columns) {
  @media (min-width: @screen-lg-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-lg-column-push(@columns) {
  @media (min-width: @screen-lg-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-lg-column-pull(@columns) {
  @media (min-width: @screen-lg-min) {
    right: percentage((@columns / @grid-columns));
  }
}


// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `@grid-columns`.

.make-grid-columns() {
  // Common styles for all sizes of grid columns, widths 1-12
  .col(@index) when (@index = 1) { // initial
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general; "=<" isn't a typo
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      position: relative;
      // Prevent columns from collapsing when empty
      min-height: 1px;
      // Inner gutter via padding
      padding-left:  (@grid-gutter-width / 2);
      padding-right: (@grid-gutter-width / 2);
    }
  }
  .col(1); // kickstart it
}

.float-grid-columns(@class) {
  .col(@index) when (@index = 1) { // initial
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      float: left;
    }
  }
  .col(1); // kickstart it
}

.calc-grid-column(@index, @class, @type) when (@type = width) and (@index > 0) {
  .col-@{class}-@{index} {
    width: percentage((@index / @grid-columns));
  }
}
.calc-grid-column(@index, @class, @type) when (@type = push) {
  .col-@{class}-push-@{index} {
    left: percentage((@index / @grid-columns));
  }
}
.calc-grid-column(@index, @class, @type) when (@type = pull) {
  .col-@{class}-pull-@{index} {
    right: percentage((@index / @grid-columns));
  }
}
.calc-grid-column(@index, @class, @type) when (@type = offset) {
  .col-@{class}-offset-@{index} {
    margin-left: percentage((@index / @grid-columns));
  }
}

// Basic looping in LESS
.loop-grid-columns(@index, @class, @type) when (@index >= 0) {
  .calc-grid-column(@index, @class, @type);
  // next iteration
  .loop-grid-columns((@index - 1), @class, @type);
}

// Create grid for specific class
.make-grid(@class) {
  .float-grid-columns(@class);
  .loop-grid-columns(@grid-columns, @class, width);
  .loop-grid-columns(@grid-columns, @class, pull);
  .loop-grid-columns(@grid-columns, @class, push);
  .loop-grid-columns(@grid-columns, @class, offset);
}

.container {
  .container-fixed();

  @media (min-width: @screen-sm-min) {
    width: @container-sm;
  }
  @media (min-width: @screen-md-min) {
    width: @container-md;
  }
  @media (min-width: @screen-lg-min) {
    width: @container-lg;
  }
}


// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

.container-fluid {
  .container-fixed();
}


// Row
//
// Rows contain and clear the floats of your columns.

.row {
  .make-row();
}


// Columns
//
// Common styles for small and large grid columns

.make-grid-columns();


// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

.make-grid(xs);


// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: @screen-sm-min) {
  .make-grid(sm);
}


// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: @screen-md-min) {
  .make-grid(md);
}


// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: @screen-lg-min) {
  .make-grid(lg);
}

    .slide-show-slides {
        height: 100%;
        overflow: hidden;

        > ul {
            height: 100%;
            white-space: nowrap;
            position: relative;

            > li {
                height: 100%;
                width: 100%;
                display: inline-block;
                position: relative;
                left: auto;
                top: auto;
            }
        }
    }
}