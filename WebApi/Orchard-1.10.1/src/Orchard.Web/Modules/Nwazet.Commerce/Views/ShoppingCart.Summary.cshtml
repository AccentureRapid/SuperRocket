@using Nwazet.Commerce.Models
@using Orchard.ContentManagement
@{
    var items = (IList<dynamic>) Model.ShopItems;
    var subtotal = (decimal) Model.Subtotal;
    var root = HttpContext.Current.Request.ApplicationPath;
    var cartUrl = Url.Action("Index", "ShoppingCart", new {area = "NWazet.Commerce"});
    if (items.Any()) {
        using (Html.BeginFormAntiForgeryPost(Url.Action("AjaxUpdate", "ShoppingCart", new {area = "Nwazet.Commerce"}), FormMethod.Post,
            new Dictionary<string, object> {{"enctype", "multipart/form-data"}})) {
            @Html.Hidden("Country", (string) Model.Country)
            @Html.Hidden("ZipCode", (string) Model.ZipCode)
            <h1><a href="@cartUrl">@T("Your Cart")</a></h1>
            <ul class="cart-item-list">
                @for (var i = 0; i < items.Count; i++) {
                    var item = items[i];
                    var propertyNamePrefix = string.Format("items[{0}]", i);
                    var product = (IProduct) item.Product;
                    var contentItem = (IContent) item.Product;
                    var title = item.Title
                                        + (item.ProductAttributes == null || item.ProductAttributes.Count == 0
                                               ? "" : " (" + string.Join(", ", ((Dictionary<int, ProductAttributeValueExtended>)item.ProductAttributes).Values
                                               .Select(v => v.Value + (v.ExtensionProviderInstance != null ? v.ExtensionProviderInstance.DisplayString(v.ExtendedValue) : ""))) + ")");
                    string imageUrl = (item.ProductImage != null && item.ProductImage.MediaParts.Count > 0) ? item.ProductImage.MediaParts[0].MediaUrl : null;
                    var quantity = (int) item.Quantity;
                    var unitPrice = (double) item.DiscountedPrice;
                    var totalPrice = quantity*unitPrice;
                    var minimumOrderQuantity = item.MinimumOrderQuantity;
                    <li>
                        @if (imageUrl != null) {
                            <a href="@Url.ItemDisplayUrl(contentItem)" class="product-image-link"><img src="@Href(imageUrl)" alt="@title" class="product-image"/></a>
                            <a href="@Url.ItemDisplayUrl(contentItem)" class="product-name">@title</a>
                        }
                        else {
                            <a href="@Url.ItemDisplayUrl(contentItem)">@title</a>
                        }
                        <span class="action"><a class="delete" href="#">@T("Remove")</a></span>
                        <span class="price">
                            @if (item.ProductAttributes != null) {
                                var attrIndex = 0;
                                foreach (KeyValuePair<int, ProductAttributeValueExtended> attribute in item.ProductAttributes) {
                                    var attributeNamePrefix = propertyNamePrefix + ".AttributeIdsToValues[" + attrIndex + "]";
                                    <input type="hidden" name="@(attributeNamePrefix).Key" value="@attribute.Key"/>
                                    <input type="hidden" name="@(attributeNamePrefix).Value.Value" value="@attribute.Value.Value" />
                                    <input type="hidden" name="@(attributeNamePrefix).Value.ExtendedValue" value="@attribute.Value.ExtendedValue" />
                                    <input type="hidden" name="@(attributeNamePrefix).Value.ExtensionProvider" value="@attribute.Value.ExtensionProvider" />
                                    attrIndex++;
                                }
                            }
                            <input name="@(propertyNamePrefix + ".ProductId")" type="hidden" value="@product.Id" />
                            <span class="numeric">
                                <input name="@(propertyNamePrefix + ".Quantity")" type="number" class="quantity addtocart-quantity" value="@quantity" min="0" />
                            </span>
                            <span class="numeric">@totalPrice.ToString("c")</span>
                            @if (minimumOrderQuantity > 1) {
                                <br /><strong>Minimum order of @minimumOrderQuantity required.</strong>
                            }
                        </span>
                    </li>
                }
            </ul>
            <div class="total">
                <button name="command" value="Update" type="submit" class="update-button">@T("Update All")</button>
                <span class="numeric label">@T("Subtotal:")</span>
                <span class="numeric subtotal">@subtotal.ToString("c")</span>
            </div>
            <span class="explanation">@T("Tax and shipping will be calculated at checkout.")</span>
            <div class="checkout">
                <a class="button" href="@cartUrl">Checkout</a>
            </div>
        }
    }
}
