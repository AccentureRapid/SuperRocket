@using Nwazet.Commerce.Models
@using Nwazet.Commerce.Services
@using Orchard.ContentManagement
@model Nwazet.Commerce.ViewModels.ProductEditorViewModel
<fieldset>
    <label class="sub" for="@Html.IdFor(m => m.Product.Sku)">@T("Sku")</label><br />
    @Html.TextBoxFor(m => m.Product.Sku, new { @class = "text" })<br />
    <label class="sub" for="@Html.IdFor(m => m.Product.Price)">@T("Regular Price")</label><br />
    @Html.TextBox("Product.Price", Model.Product.Price.ToString("0.00"), new { @class = "small text" })<br/>
    <label class="sub" for="@Html.Id("DiscountPrice")">@T("Discounted Price")</label><br />
    @Html.TextBox("DiscountPrice", Model.Product.DiscountPrice >= 0
        ? Model.Product.DiscountPrice.ToString("0.00")
        : "",
        new { @class = "small text" })
    <p class="hint">@T("Leave the discounted price empty to have the regular price apply.")</p>

    @if (Model.AllowProductOverrides) {
        @Html.CheckBoxFor(m => m.Product.OverrideTieredPricing)
        <label class="sub" for="@Html.IdFor(m => m.Product.OverrideTieredPricing)">@T("override tiered pricing")</label>
    }
</fieldset>


@Display.PriceTiersAdmin(PriceTiers: Model.PriceTiers, ShowPriceTiers: (Model.AllowProductOverrides && Model.Product.OverrideTieredPricing), NamePrefix: Html.NameForModel(), ToggleCheckboxId: Html.IdFor(m => m.Product.OverrideTieredPricing))

<fieldset>
    <label class="sub" for="@Html.IdFor(m => m.Product.Inventory)">@T("Inventory")</label>
    @if (Model.Product.Has<BundlePart>()) {
        <text>: @Model.Product.Inventory</text>
    }
    else {
        <br />@Html.TextBoxFor(m => m.Product.Inventory, new { @class = "text" })
    }<br />
    <label class="sub" for="@Html.IdFor(m => m.Product.OutOfStockMessage)">@T("Out of stock message")</label><br />
    @Html.TextBoxFor(m => m.Product.OutOfStockMessage, new { @class = "text-medium" })<br />
    <span class="hint">@T("This message will be displayed if the inventory is zero or less. Leave blank for the default message to be used.")</span>
    @Html.CheckBoxFor(m => m.Product.AllowBackOrder)
    <label class="sub" for="@Html.IdFor(m => m.Product.AllowBackOrder)">@T("allow back order")</label><br />
    <span class="hint">@T("If unchecked, the add button won't be visible on the product page when the inventory is zero or less.")</span>
    <label class="sub" for="@Html.IdFor(m => m.Product.MinimumOrderQuantity)">@T("Minimum order quantity")</label><br />
    @Html.TextBoxFor(m => m.Product.MinimumOrderQuantity, new { @class = "text-small", @type="number", min="1" })<br />
</fieldset>
<fieldset>
    <label class="sub" for="@Html.IdFor(m => m.Product.Weight)">@T("Weight")</label><br />
    @Html.TextBoxFor(m => m.Product.Weight, new { @class = "text" })<br />
    <label class="sub" for="@Html.IdFor(m => m.Product.Size)">@T("Size")</label><br/>
    @{
        // Attempt to get size-based shipping methods through WCA so we do it late and we don't fail if the feature is not enabled
        var shippingMethods = WorkContext.Resolve<IEnumerable<IShippingMethodProvider>>();
        if (shippingMethods != null) {
            var sizes = shippingMethods
                .Where(m => m.GetType() == typeof (SizeBasedShippingMethodProvider))
                .SelectMany(m => m.GetShippingMethods().Cast<SizeBasedShippingMethodPart>().Select(p => p.Size))
                .Distinct()
                .OrderBy(s => s)
                .ToList();
            @Html.DropDownList("SizeHelper", sizes.Select(s => new SelectListItem {Text = s, Value = s}))
            using (Script.Foot()) {
                <script type="text/javascript">
                    (function ($) {
                        $(function () {
                            var helper = $("#NwazetCommerceProduct_SizeHelper").change(function () {
                                $("#NwazetCommerceProduct_Size").val(helper.val());
                            });
                        });
                    })(jQuery);
                </script>
            }
        }
    }
    @Html.TextBoxFor(m => m.Product.Size, new { @class = "text" })<br />
    <label class="sub" for="@Html.IdFor(m => m.Product.ShippingCost)">@T("Shipping Cost")</label><br />
    @Html.TextBoxFor(m => m.Product.ShippingCost, new { @class = "text" })<br />
    <span class="hint">@T("Specify a shipping cost if you want the shipping cost to be fixed. Otherwise, leave this empty and only specify the weight. The shipping will be computed based on the shipping provider that the customer will pick.")</span>
</fieldset>
<fieldset>
    @Html.CheckBoxFor(m => m.Product.IsDigital)
    <label class="sub" for="@Html.IdFor(m => m.Product.IsDigital)">@T("digital product")</label>
</fieldset>
<fieldset>
    @Html.CheckBoxFor(m => m.Product.AuthenticationRequired)
    <label class="sub" for="@Html.IdFor(m => m.Product.AuthenticationRequired)">@T("authentication required")</label>
    <span class="hint">@T("This allows for associating the order with the user but will force the user to log in prior to purchasing.")</span>
</fieldset>