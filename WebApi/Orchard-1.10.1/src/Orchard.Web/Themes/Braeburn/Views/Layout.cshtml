@using Orchard.ContentManagement;
@using PJS.Bootstrap.Models;

@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix) {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : ""; }).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }
}
@{

    var settings = WorkContext.CurrentSite.As<BootstrapThemeSettingsPart>();
    /* Global includes for the theme
    ***************************************************************/

    SetMeta("charset", "utf-8");
    SetMeta("robots", "index, follow");
    SetMeta("X-UA-Compatible", "IE=edge,chrome=1");
    SetMeta("viewport", "width=device-width, initial-scale=1");
    SetMeta("apple-mobile-web-app-capable", "yes");

    /* Some useful shortcuts or settings
    ***************************************************************/

    Func<dynamic, dynamic> Zone = x => Display(x); // Zone as an alias for Display to help make it obvious when we're displaying zones

    /* Layout classification based on filled zones
    ***************************************************************/

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new[] { "AsideFirst", "AsideSecond" }, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (HasText(asideClass)) {
        Model.Classes.Add(asideClass);
    }

    //Add classes to the wrapper div to toggle tripel widget zones on and off
    var tripelClass = CalcuClassify(new[] { "TripelFirst", "TripelSecond", "TripelThird" }, "tripel-"); // for tripel-1, triple-2, etc. if any of the tripel zones are filled
    if (HasText(tripelClass)) {
        Model.Classes.Add(tripelClass);
    }

    //Add classes to the wrapper div to toggle quad widget zones on and off
    var footerQuadClass = CalcuClassify(new[] { "FooterQuadFirst", "FooterQuadSecond", "FooterQuadThird", "FooterQuadFourth" }, "split-"); // for quad-1, quad-2, etc. if any of the quad zones are filled
    if (HasText(footerQuadClass)) {
        Model.Classes.Add(footerQuadClass);
    }

    /* Inserting some ad hoc shapes
    ***************************************************************/

    WorkContext.Layout.Header.Add(New.Branding(), "0"); // Site name and link to the home page
    WorkContext.Layout.Footer.Add(New.BadgeOfHonor(), "5"); // Powered by Wiggleware
    //WorkContext.Layout.Footer.Add(New.Switcher(), "0"); // Switcher for use in demo mode

    /* Last bit of code to prep the layout wrapper
    ***************************************************************/

    Model.Id = "layout-wrapper";
    if (settings.UseStickyFooter) {
        Model.Classes.Add("sticky-footer");
    }

    var tag = Tag(Model, "div"); // using Tag so the layout div gets the classes, id and other attributes added to the Model

    var containerClass = settings.UseFluidLayout ? "fluid-layout" : "container";
}

@tag.StartElement
    @if (settings.UseFixedNav) {
        <div class="navbar navbar-fixed-top @(settings.UseInverseNav ? "navbar-inverse" : "navbar-default")">
            <div class="@containerClass">
                <div class="navbar-header">
                    @if (Model.Header != null) {
                        @Zone(Model.Header)
                    }
                    <button class="navbar-toggle" type="button" data-toggle="collapse" data-target="#main-menu">
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                </div>
                <div class="navbar-collapse collapse" id="main-menu">
                    @if (Model.Navigation != null) {
                        @Zone(Model.Navigation)
                    }
                </div>
            </div>
        </div>
    }
    else {
        <div class="@containerClass">
            <div class="row">
                <div class="col-md-12">
                    @if (Model.Header != null) {
                        <div class="page-header">
                            @Zone(Model.Header)
                        </div>
                    }
                    <div>
                        @if (Model.Navigation != null) {
                            @Zone(Model.Navigation)
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    @if (Model.Featured != null) {
        <div id="featured">
            <div class="row">
                @Zone(Model.Featured)
            </div>
        </div>
    }
    <div class="@containerClass">
        @if (Model.BeforeMain != null) {
            <div class="row">
                <div class="col-md-12">
                    @Zone(Model.BeforeMain)
                </div>
            </div>
        }
        <div class="row prime">
            @if (Model.AsideFirst != null) {
                <aside class="col-md-3">
                    <div class="well well-sm">
                        @Zone(Model.AsideFirst)
                    </div>
                </aside>
            }
            <div id="layout-content" class="group">
                @if (Model.Messages != null)
                {
                    <div id="messages">
                        @Zone(Model.Messages)
                    </div>
                }
                @if (Model.BeforeContent != null)
                {
                    <div id="before-content">
                        @Zone(Model.BeforeContent)
                    </div>
                }
                @* the model content for the page is in the Content zone @ the default position (nothing, zero, zilch) *@
                @if (Model.Content != null)
                {
                    <div id="content" class="group">
                        @Zone(Model.Content)
                    </div>
                }
                @if (Model.AfterContent != null)
                {
                    <div id="after-content">
                        @Zone(Model.AfterContent)
                    </div>
                }
            </div>
            @if (Model.AsideSecond != null) {
                <aside class="col-md-3">
                    <div class="well well-sm">
                        @Zone(Model.AsideSecond)
                    </div>
                </aside>
            }
        </div>
        @if (Model.AfterMain != null) {
            <div class="row">
                <div class="col-md-12">
                    @Zone(Model.AfterMain)
                </div>
            </div>
        }
       @if (Model.TripelFirst != null || Model.TripelSecond != null || Model.TripelThird != null)
       {
        <div id="layout-tripel-container">
            <div id="layout-tripel" class="group">
                @* as in beer *@
                @if (Model.TripelFirst != null)
                {
                    <div id="tripel-first">
                        @Zone(Model.TripelFirst)
                    </div>
                }
                @if (Model.TripelSecond != null)
                {
                    <div id="tripel-second">
                        @Zone(Model.TripelSecond)
                    </div>
                }
                @if (Model.TripelThird != null)
                {
                    <div id="tripel-third">
                        @Zone(Model.TripelThird)
                    </div>
                }
            </div>
        </div>
       }
        @if (Model.FooterQuadFirst != null || Model.FooterQuadSecond != null || Model.FooterQuadThird != null || Model.FooterQuadFourth != null)
        {

            <div id="layout-footer" class="group">
                <hr />
                <footer id="footer">
                    @if (Model.FooterQuadFirst != null || Model.FooterQuadSecond != null || Model.FooterQuadThird != null || Model.FooterQuadFourth != null)
                    {
                        <div id="footer-quad" class="group">
                            @if (Model.FooterQuadFirst != null)
                            {
                                <div id="footer-quad-first">
                                    @Zone(Model.FooterQuadFirst)
                                </div>
                            }
                            @if (Model.FooterQuadSecond != null)
                            {
                                <div id="footer-quad-second">
                                    @Zone(Model.FooterQuadSecond)
                                </div>
                            }
                            @if (Model.FooterQuadThird != null)
                            {
                                <div id="footer-quad-third">
                                    @Zone(Model.FooterQuadThird)
                                </div>
                            }
                            @if (Model.FooterQuadFourth != null)
                            {
                                <div id="footer-quad-fourth">
                                    @Zone(Model.FooterQuadFourth)
                                </div>
                            }
                        </div>
                    }
                    @if (Model.Footer != null)
                    {
                        <div id="footer-sig" class="group">
                            @Zone(Model.Footer)
                        </div>
                    }
                </footer>
            </div>
        }
    </div>
@tag.EndElement
<div id="footer">
    <div class="@containerClass">
        @if (Model.Footer != null) {
            
            <div class="row">
                @Zone(Model.Footer)
            </div>
        }
    </div>
</div>
<div id="toTop">
    <h1><i class="glyphicon glyphicon-chevron-up"></i></h1>
</div>